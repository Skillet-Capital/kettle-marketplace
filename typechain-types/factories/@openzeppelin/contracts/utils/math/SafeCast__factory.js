/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, Interface, } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "uint8",
                name: "bits",
                type: "uint8",
            },
            {
                internalType: "int256",
                name: "value",
                type: "int256",
            },
        ],
        name: "SafeCastOverflowedIntDowncast",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "int256",
                name: "value",
                type: "int256",
            },
        ],
        name: "SafeCastOverflowedIntToUint",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint8",
                name: "bits",
                type: "uint8",
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "SafeCastOverflowedUintDowncast",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "SafeCastOverflowedUintToInt",
        type: "error",
    },
];
const _bytecode = "0x608060405234601a57604051603f6020823930815050603f90f35b600080fdfe6080604052600080fdfea264697066735822122049aba4dd8a95242c02181ad23407bf1accfb63b06fa2d9cab4bf35be7986adfa64736f6c634300081c0033";
const isSuperArgs = (xs) => xs.length > 1;
export class SafeCast__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new Interface(_abi);
    }
    static connect(address, runner) {
        return new Contract(address, _abi, runner);
    }
}
SafeCast__factory.bytecode = _bytecode;
SafeCast__factory.abi = _abi;
