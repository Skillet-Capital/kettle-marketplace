/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, Interface, } from "ethers";
const _abi = [
    {
        inputs: [],
        name: "MerkleProofInvalidMultiproof",
        type: "error",
    },
];
const _bytecode = "0x608060405234601a57604051603f6020823930815050603f90f35b600080fdfe6080604052600080fdfea2646970667358221220498ffee804f82cb357d3f78a4662532d3272bbb5fd0f6345c0476fbc2618cce164736f6c634300081c0033";
const isSuperArgs = (xs) => xs.length > 1;
export class MerkleProof__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new Interface(_abi);
    }
    static connect(address, runner) {
        return new Contract(address, _abi, runner);
    }
}
MerkleProof__factory.bytecode = _bytecode;
MerkleProof__factory.abi = _abi;
