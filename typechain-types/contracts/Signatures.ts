/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type CollateralStruct = {
  criteria: BigNumberish;
  collection: AddressLike;
  identifier: BigNumberish;
};

export type CollateralStructOutput = [
  criteria: bigint,
  collection: string,
  identifier: bigint
] & { criteria: bigint; collection: string; identifier: bigint };

export type MarketOfferTermsStruct = {
  currency: AddressLike;
  amount: BigNumberish;
};

export type MarketOfferTermsStructOutput = [
  currency: string,
  amount: bigint
] & { currency: string; amount: bigint };

export type FeeTermsStruct = { recipient: AddressLike; rate: BigNumberish };

export type FeeTermsStructOutput = [recipient: string, rate: bigint] & {
  recipient: string;
  rate: bigint;
};

export type MarketOfferStruct = {
  side: BigNumberish;
  maker: AddressLike;
  taker: AddressLike;
  collateral: CollateralStruct;
  terms: MarketOfferTermsStruct;
  fee: FeeTermsStruct;
  expiration: BigNumberish;
  salt: BigNumberish;
};

export type MarketOfferStructOutput = [
  side: bigint,
  maker: string,
  taker: string,
  collateral: CollateralStructOutput,
  terms: MarketOfferTermsStructOutput,
  fee: FeeTermsStructOutput,
  expiration: bigint,
  salt: bigint
] & {
  side: bigint;
  maker: string;
  taker: string;
  collateral: CollateralStructOutput;
  terms: MarketOfferTermsStructOutput;
  fee: FeeTermsStructOutput;
  expiration: bigint;
  salt: bigint;
};

export type RedemptionChargeStruct = {
  redeemer: AddressLike;
  collection: AddressLike;
  tokenId: BigNumberish;
  currency: AddressLike;
  amount: BigNumberish;
  expiration: BigNumberish;
  salt: BigNumberish;
};

export type RedemptionChargeStructOutput = [
  redeemer: string,
  collection: string,
  tokenId: bigint,
  currency: string,
  amount: bigint,
  expiration: bigint,
  salt: bigint
] & {
  redeemer: string;
  collection: string;
  tokenId: bigint;
  currency: string;
  amount: bigint;
  expiration: bigint;
  salt: bigint;
};

export interface SignaturesInterface extends Interface {
  getFunction(
    nameOrSignature: "hashMarketOffer" | "hashRedemptionCharge" | "nonces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hashMarketOffer",
    values: [MarketOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashRedemptionCharge",
    values: [AddressLike, RedemptionChargeStruct]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "hashMarketOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashRedemptionCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
}

export interface Signatures extends BaseContract {
  connect(runner?: ContractRunner | null): Signatures;
  waitForDeployment(): Promise<this>;

  interface: SignaturesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hashMarketOffer: TypedContractMethod<
    [offer: MarketOfferStruct],
    [string],
    "view"
  >;

  hashRedemptionCharge: TypedContractMethod<
    [admin: AddressLike, charge: RedemptionChargeStruct],
    [string],
    "view"
  >;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hashMarketOffer"
  ): TypedContractMethod<[offer: MarketOfferStruct], [string], "view">;
  getFunction(
    nameOrSignature: "hashRedemptionCharge"
  ): TypedContractMethod<
    [admin: AddressLike, charge: RedemptionChargeStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
