/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type CollateralStruct = {
  criteria: BigNumberish;
  collection: AddressLike;
  identifier: BigNumberish;
};

export type CollateralStructOutput = [
  criteria: bigint,
  collection: string,
  identifier: bigint
] & { criteria: bigint; collection: string; identifier: bigint };

export type MarketOfferTermsStruct = {
  currency: AddressLike;
  amount: BigNumberish;
};

export type MarketOfferTermsStructOutput = [
  currency: string,
  amount: bigint
] & { currency: string; amount: bigint };

export type FeeTermsStruct = { recipient: AddressLike; rate: BigNumberish };

export type FeeTermsStructOutput = [recipient: string, rate: bigint] & {
  recipient: string;
  rate: bigint;
};

export type MarketOfferStruct = {
  side: BigNumberish;
  maker: AddressLike;
  taker: AddressLike;
  collateral: CollateralStruct;
  terms: MarketOfferTermsStruct;
  fee: FeeTermsStruct;
  expiration: BigNumberish;
  salt: BigNumberish;
};

export type MarketOfferStructOutput = [
  side: bigint,
  maker: string,
  taker: string,
  collateral: CollateralStructOutput,
  terms: MarketOfferTermsStructOutput,
  fee: FeeTermsStructOutput,
  expiration: bigint,
  salt: bigint
] & {
  side: bigint;
  maker: string;
  taker: string;
  collateral: CollateralStructOutput;
  terms: MarketOfferTermsStructOutput;
  fee: FeeTermsStructOutput;
  expiration: bigint;
  salt: bigint;
};

export type RedemptionChargeStruct = {
  redeemer: AddressLike;
  collection: AddressLike;
  tokenId: BigNumberish;
  currency: AddressLike;
  amount: BigNumberish;
  expiration: BigNumberish;
  salt: BigNumberish;
};

export type RedemptionChargeStructOutput = [
  redeemer: string,
  collection: string,
  tokenId: bigint,
  currency: string,
  amount: bigint,
  expiration: bigint,
  salt: bigint
] & {
  redeemer: string;
  collection: string;
  tokenId: bigint;
  currency: string;
  amount: bigint;
  expiration: bigint;
  salt: bigint;
};

export interface KettleMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "__Kettle_init"
      | "cancelOffers"
      | "cancelOffersForUser"
      | "cancelledOrFulfilled"
      | "hashMarketOffer"
      | "hashRedemptionCharge"
      | "incrementNonce"
      | "incrementNonceForUser"
      | "nonces"
      | "offerManager"
      | "owner"
      | "redeem"
      | "redemptionSigner"
      | "redemptionWallet"
      | "renounceOwnership"
      | "setOfferManager"
      | "setRedemptionSigner"
      | "setRedemptionWallet"
      | "takeAsk"
      | "takeBid"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "MarketOfferTaken"
      | "NonceIncremented"
      | "OfferCancelled"
      | "OfferManagerUpdated"
      | "OwnershipTransferred"
      | "Redemption"
      | "RedemptionSignerUpdated"
      | "RedemptionWalletUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "__Kettle_init",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffers",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffersForUser",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrFulfilled",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMarketOffer",
    values: [MarketOfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "hashRedemptionCharge",
    values: [AddressLike, RedemptionChargeStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonceForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "offerManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [RedemptionChargeStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedemptionWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takeAsk",
    values: [AddressLike, MarketOfferStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBid",
    values: [BigNumberish, MarketOfferStruct, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Kettle_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffersForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrFulfilled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashMarketOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashRedemptionCharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonceForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redemptionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedemptionWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketOfferTakenEvent {
  export type InputTuple = [
    hash: BytesLike,
    tokenId: BigNumberish,
    taker: AddressLike,
    offer: MarketOfferStruct
  ];
  export type OutputTuple = [
    hash: string,
    tokenId: bigint,
    taker: string,
    offer: MarketOfferStructOutput
  ];
  export interface OutputObject {
    hash: string;
    tokenId: bigint;
    taker: string;
    offer: MarketOfferStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NonceIncrementedEvent {
  export type InputTuple = [
    operator: AddressLike,
    user: AddressLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [operator: string, user: string, nonce: bigint];
  export interface OutputObject {
    operator: string;
    user: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferCancelledEvent {
  export type InputTuple = [
    operator: AddressLike,
    user: AddressLike,
    salt: BigNumberish
  ];
  export type OutputTuple = [operator: string, user: string, salt: bigint];
  export interface OutputObject {
    operator: string;
    user: string;
    salt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OfferManagerUpdatedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionEvent {
  export type InputTuple = [hash: BytesLike, charge: RedemptionChargeStruct];
  export type OutputTuple = [
    hash: string,
    charge: RedemptionChargeStructOutput
  ];
  export interface OutputObject {
    hash: string;
    charge: RedemptionChargeStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionSignerUpdatedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedemptionWalletUpdatedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KettleMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): KettleMarketplace;
  waitForDeployment(): Promise<this>;

  interface: KettleMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  __Kettle_init: TypedContractMethod<
    [
      owner: AddressLike,
      _redemptionSigner: AddressLike,
      _redemptionWallet: AddressLike,
      _offerManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  cancelOffers: TypedContractMethod<
    [salts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  cancelOffersForUser: TypedContractMethod<
    [maker: AddressLike, salts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  cancelledOrFulfilled: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  hashMarketOffer: TypedContractMethod<
    [offer: MarketOfferStruct],
    [string],
    "view"
  >;

  hashRedemptionCharge: TypedContractMethod<
    [admin: AddressLike, charge: RedemptionChargeStruct],
    [string],
    "view"
  >;

  incrementNonce: TypedContractMethod<[], [void], "nonpayable">;

  incrementNonceForUser: TypedContractMethod<
    [maker: AddressLike],
    [void],
    "nonpayable"
  >;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  offerManager: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  redeem: TypedContractMethod<
    [charge: RedemptionChargeStruct, signature: BytesLike],
    [string],
    "nonpayable"
  >;

  redemptionSigner: TypedContractMethod<[], [string], "view">;

  redemptionWallet: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOfferManager: TypedContractMethod<
    [_offerManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setRedemptionSigner: TypedContractMethod<
    [_redemptionSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  setRedemptionWallet: TypedContractMethod<
    [_redemptionWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  takeAsk: TypedContractMethod<
    [taker: AddressLike, offer: MarketOfferStruct, signature: BytesLike],
    [string],
    "nonpayable"
  >;

  takeBid: TypedContractMethod<
    [
      tokenId: BigNumberish,
      offer: MarketOfferStruct,
      signature: BytesLike,
      proof: BytesLike[]
    ],
    [string],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "__Kettle_init"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      _redemptionSigner: AddressLike,
      _redemptionWallet: AddressLike,
      _offerManager: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOffers"
  ): TypedContractMethod<[salts: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelOffersForUser"
  ): TypedContractMethod<
    [maker: AddressLike, salts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelledOrFulfilled"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "hashMarketOffer"
  ): TypedContractMethod<[offer: MarketOfferStruct], [string], "view">;
  getFunction(
    nameOrSignature: "hashRedemptionCharge"
  ): TypedContractMethod<
    [admin: AddressLike, charge: RedemptionChargeStruct],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "incrementNonce"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "incrementNonceForUser"
  ): TypedContractMethod<[maker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "offerManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [charge: RedemptionChargeStruct, signature: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redemptionSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redemptionWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOfferManager"
  ): TypedContractMethod<[_offerManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRedemptionSigner"
  ): TypedContractMethod<
    [_redemptionSigner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRedemptionWallet"
  ): TypedContractMethod<
    [_redemptionWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "takeAsk"
  ): TypedContractMethod<
    [taker: AddressLike, offer: MarketOfferStruct, signature: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "takeBid"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      offer: MarketOfferStruct,
      signature: BytesLike,
      proof: BytesLike[]
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MarketOfferTaken"
  ): TypedContractEvent<
    MarketOfferTakenEvent.InputTuple,
    MarketOfferTakenEvent.OutputTuple,
    MarketOfferTakenEvent.OutputObject
  >;
  getEvent(
    key: "NonceIncremented"
  ): TypedContractEvent<
    NonceIncrementedEvent.InputTuple,
    NonceIncrementedEvent.OutputTuple,
    NonceIncrementedEvent.OutputObject
  >;
  getEvent(
    key: "OfferCancelled"
  ): TypedContractEvent<
    OfferCancelledEvent.InputTuple,
    OfferCancelledEvent.OutputTuple,
    OfferCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OfferManagerUpdated"
  ): TypedContractEvent<
    OfferManagerUpdatedEvent.InputTuple,
    OfferManagerUpdatedEvent.OutputTuple,
    OfferManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Redemption"
  ): TypedContractEvent<
    RedemptionEvent.InputTuple,
    RedemptionEvent.OutputTuple,
    RedemptionEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionSignerUpdated"
  ): TypedContractEvent<
    RedemptionSignerUpdatedEvent.InputTuple,
    RedemptionSignerUpdatedEvent.OutputTuple,
    RedemptionSignerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RedemptionWalletUpdated"
  ): TypedContractEvent<
    RedemptionWalletUpdatedEvent.InputTuple,
    RedemptionWalletUpdatedEvent.OutputTuple,
    RedemptionWalletUpdatedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MarketOfferTaken(bytes32,uint256,address,tuple)": TypedContractEvent<
      MarketOfferTakenEvent.InputTuple,
      MarketOfferTakenEvent.OutputTuple,
      MarketOfferTakenEvent.OutputObject
    >;
    MarketOfferTaken: TypedContractEvent<
      MarketOfferTakenEvent.InputTuple,
      MarketOfferTakenEvent.OutputTuple,
      MarketOfferTakenEvent.OutputObject
    >;

    "NonceIncremented(address,address,uint256)": TypedContractEvent<
      NonceIncrementedEvent.InputTuple,
      NonceIncrementedEvent.OutputTuple,
      NonceIncrementedEvent.OutputObject
    >;
    NonceIncremented: TypedContractEvent<
      NonceIncrementedEvent.InputTuple,
      NonceIncrementedEvent.OutputTuple,
      NonceIncrementedEvent.OutputObject
    >;

    "OfferCancelled(address,address,uint256)": TypedContractEvent<
      OfferCancelledEvent.InputTuple,
      OfferCancelledEvent.OutputTuple,
      OfferCancelledEvent.OutputObject
    >;
    OfferCancelled: TypedContractEvent<
      OfferCancelledEvent.InputTuple,
      OfferCancelledEvent.OutputTuple,
      OfferCancelledEvent.OutputObject
    >;

    "OfferManagerUpdated(address)": TypedContractEvent<
      OfferManagerUpdatedEvent.InputTuple,
      OfferManagerUpdatedEvent.OutputTuple,
      OfferManagerUpdatedEvent.OutputObject
    >;
    OfferManagerUpdated: TypedContractEvent<
      OfferManagerUpdatedEvent.InputTuple,
      OfferManagerUpdatedEvent.OutputTuple,
      OfferManagerUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Redemption(bytes32,tuple)": TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;
    Redemption: TypedContractEvent<
      RedemptionEvent.InputTuple,
      RedemptionEvent.OutputTuple,
      RedemptionEvent.OutputObject
    >;

    "RedemptionSignerUpdated(address)": TypedContractEvent<
      RedemptionSignerUpdatedEvent.InputTuple,
      RedemptionSignerUpdatedEvent.OutputTuple,
      RedemptionSignerUpdatedEvent.OutputObject
    >;
    RedemptionSignerUpdated: TypedContractEvent<
      RedemptionSignerUpdatedEvent.InputTuple,
      RedemptionSignerUpdatedEvent.OutputTuple,
      RedemptionSignerUpdatedEvent.OutputObject
    >;

    "RedemptionWalletUpdated(address)": TypedContractEvent<
      RedemptionWalletUpdatedEvent.InputTuple,
      RedemptionWalletUpdatedEvent.OutputTuple,
      RedemptionWalletUpdatedEvent.OutputObject
    >;
    RedemptionWalletUpdated: TypedContractEvent<
      RedemptionWalletUpdatedEvent.InputTuple,
      RedemptionWalletUpdatedEvent.OutputTuple,
      RedemptionWalletUpdatedEvent.OutputObject
    >;
  };
}
